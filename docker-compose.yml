version: '3.8'

services:
  # Frontend application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "3000:80"
    environment:
      - NODE_ENV=production
    depends_on:
      - backend
      - redis
    networks:
      - workflow-network
    restart: unless-stopped

  # Backend API (placeholder - you'll need to implement this)
  backend:
    image: node:18-alpine
    working_dir: /app
    command: sh -c "echo 'Backend service placeholder. Implement your API here.' && tail -f /dev/null"
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=mongodb://mongo:27017/workflow-db
      - REDIS_URL=redis://redis:6379
    depends_on:
      - mongo
      - redis
    networks:
      - workflow-network
    restart: unless-stopped

  # MongoDB database
  mongo:
    image: mongo:6-jammy
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=password
      - MONGO_INITDB_DATABASE=workflow-db
    volumes:
      - mongo-data:/data/db
      - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - workflow-network
    restart: unless-stopped

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass redis-password
    volumes:
      - redis-data:/data
    networks:
      - workflow-network
    restart: unless-stopped

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
    networks:
      - workflow-network
    restart: unless-stopped

volumes:
  mongo-data:
  redis-data:

networks:
  workflow-network:
    driver: bridge
